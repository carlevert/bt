\chapter{Introduction}

\suna{Give a high level introduction to the reader into your thesis -- what is is about -- before starting with background section.}

\section{Background}

Ranking can informally be defined as ``a relationship between a set of items such that, for any two items, the first is either 'ranked higher than', 'ranked lower than' or 'ranked equal to' the second'' \cite{wiki:ranking}.

Typical applications related to ranking include picking the most relevant search results when searching the web or an online catalog. To a great extent, litterature about ranking such as Raman and Joachims article \emph{Learning Socially Optimal Information Systems from Egoistic Users} \cite{raman} deals with creating a ranking from a set of parameters such as a users behaviour on a website. When searching the web, the all dominating algorithms at work are Google's PageRank and its successors which assigns a numerical weight to each page based on incoming links, among other things\footnote{While Google is not exactly transparent about these matters, the original PageRank seems to be deprecated by 2016.}.

The question of how to assign weights to items in a set is not adressed in this thesis. Instead, the focus is on obtaining the rank for a score (weight) in the context of an online computer game.   

\subsection*{Ranking in online games}

Ranking in computer games is mainly done to reward skilled or lucky players. Introducing a dimension of competetion makes the game more exciting and hopefully -- from the game makers point of view -- more profitable. This can be done by creating a leaderbord that shows the highest scores or by giving some measure of improvement to the player, eg. number of ranks advanced by the last game. Other reasons for ranking skills in computer games include gambling and matching equally skilled players for challenges.

So what properties are used for ranking players? A common way to measure a players skills is to assign the player score for picking diamonds, riding a bike or killing a monster. The number of collected diamonds or slaughtered monsters s translate into a higher score and a higher rank. Also, a lower score could be better in case score is a time and a faster time is better. And then there are countless of variations of these two.

It should be noted that an equal performance during a game need not necessarily to correspond with the same score. In the TrueSkill\texttrademark Ranking System created by Microsoft for Xbox Live a new, unexperienced player can get a higher score than another player that performed better according to the rules of the game. The motivation for this is to keep the game interesting \cite{trueskill}. 

\subsection*{No need for precision (for most of the time)}

As a player of a computer game you want to know if you are making progress in your gaming. However, games that can be considered having even a moderate success on todays marketplaces have at least hundreds of thousands of players not knowing each other. Therefore, cheating by approximating ranks works perfectly fine most of the time. Also, approximated ranks come pretty close to the real rank as we shall see.

In some cases though an exact rank needs to be calculated. Obviously it would be embarrassing if two players were estimated to have rank number one. In general, higher ranks calls for greater precision.

\suna{Tell the user already here the methods that you will be using. This is not a novel where we build up curiosity, its a scientific document, we tell the reader asp. The reader should know whether its worth keep reading}

\section{Problem description and methods}

The overall goal with this thesis is to investigate how to get the rank or an approximate rank for a new highscore in the context of an online computer game. Ranking a highscore may sound like a trivial problem, yet it is not.

The questions to researched in this thesis are

\begin{enumerate}
  \setlength\itemsep{-0.4em}
\item How to get a rank for a score efficiently and in near real time when the set of scores is large?
\item Can the Bucket with Global Query algorithm?
\end{enumerate}

To attend to the first question an overview of a few approaches to ranking will be provided in chapter \ref{ranking-algorithms}, starting by a naive approach derived from the definition of ranking, ending with a draft for a streaming and approximating approach. The algorithms presented in chapter \ref{ranking-algorithms} do certainly not represent a complete listing of all possible ways of solving the problem stated but will nevertheless provide some insight in the area.

To answer the second question, whether it is possible to improve the Bucket with Global Query-algorithm, a system for evaluating the performance in terms of efficiency and precision is built. The precise method for this evaluation is left for chapter \ref{method}.
